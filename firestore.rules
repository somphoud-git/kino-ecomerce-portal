rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // These functions define user roles and validate data structures.
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isSelf(userId) {
      return isSignedIn() && userId == request.auth.uid;
    }
    
    function userExists(uid) {
      return exists(/databases/$(database)/documents/customers/$(uid));
    }
    
    function getUserRole() {
      return (isSignedIn() && userExists(request.auth.uid)) ? 
              get(/databases/$(database)/documents/customers/$(request.auth.uid)).data.userType : 
              'customer';
    }
    
    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }
    
    function isStaff() {
      let role = getUserRole();
      return isSignedIn() && (role == 'admin' || role == 'staff');
    }
    
    function isValidNewCustomer(data) {
      let requiredKeys = ['uid', 'email'];
      let optionalKeys = [
        'name','surname','phoneNumber','whatsapp','village','district','province','userType','createdAt','updatedAt'
      ];
      return data.keys().hasAll(requiredKeys) && 
             data.keys().hasOnly(requiredKeys.concat(optionalKeys)) &&
             data.uid == request.auth.uid &&
             data.email == request.auth.token.email &&
             (!data.keys().hasAny(['userType']) || data.userType == 'customer');
    }

    // This is the updated and fixed helper function for validating order data.
    function isValidOrderData(data) {
      let requiredKeys = [
        'userId', 'items', 'totalAmount', 'totalItems', 'status', 'customerInfo'
      ];
      let optionalKeys = [
        'createdAt', 'updatedAt', 'paymentReceipt', 'comments'
      ];
      
      // The `hasOnly` check now correctly accounts for optional fields.
      return data.keys().hasAll(requiredKeys) &&
             data.keys().hasOnly(requiredKeys.concat(optionalKeys)) &&
             data.userId == request.auth.uid &&
             data.status == 'pending' &&
             data.totalAmount is number &&
             data.totalItems is number &&
             data.items is list &&
             data.items.size() > 0 &&
             data.customerInfo is map &&
             isValidCustomerInfo(data.customerInfo);
    }
    
    function isValidCustomerInfo(customerInfo) {
      return customerInfo.keys().hasAll([
        'name', 'surname', 'phoneNumber', 'email', 'village', 'district', 'province'
      ]) &&
      customerInfo.keys().hasOnly([
        'name', 'surname', 'phoneNumber', 'email', 'village', 'district', 'province', 'whatsapp'
      ]) &&
      customerInfo.name is string &&
      customerInfo.surname is string &&
      customerInfo.phoneNumber is string &&
      customerInfo.email is string &&
      customerInfo.village is string &&
      customerInfo.district is string &&
      customerInfo.province is string;
    }
    
    // --- Main Rules ---
    
    // ===== CUSTOMERS COLLECTION =====
    match /customers/{userId} {
      // Allows an authenticated user to create a profile for themselves.
      allow create: if isSignedIn() && request.auth.uid == userId &&
                      !exists(/databases/$(database)/documents/customers/$(userId)) &&
                      isValidNewCustomer(request.resource.data);
      
      // Allows a user to read their own document. Staff can read any user document.
      allow read: if isSelf(userId) || isStaff();
      
      // Allows users to update their own document. Staff can update any user.
      allow update: if isSelf(userId) || isStaff();
      
      // Only admins can delete a user document.
      allow delete: if isAdmin();
      
      // Allows unauthenticated users to query for a document based on phone number or email.
      allow list: if !isSignedIn() && 
                    request.query.keys().hasOnly(['where', 'limit']) &&
                    request.query.where.size() == 1 &&
                    (request.query.where[0][0] == 'phoneNumber' || request.query.where[0][0] == 'email');
    }
    
    // ===== PRODUCTS COLLECTION =====
    match /products/{productId} {
      // Anyone can read products.
      allow read: if true;
      
      // Only staff can manage products.
      allow write: if isStaff();
    }
    
    // ===== CATEGORIES COLLECTION =====
    match /categories/{categoryId} {
      // Anyone can read categories.
      allow read: if true;
      
      // Only staff can manage categories.
      allow write: if isStaff();
    }
    
    // ===== BRANDS COLLECTION =====
    match /brands/{brandId} {
      // Anyone can read brands.
      allow read: if true;
      
      // Only staff can manage brands.
      allow write: if isStaff();
    }

    // ===== ORDERS COLLECTION =====
    match /orders/{orderId} {
      // Users can read their own orders. Staff can read all orders.
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isStaff());
      
      // Users can create their own orders, and the data must be valid.
      allow create: if isSignedIn() && 
                      request.resource.data.userId == request.auth.uid &&
                      isValidOrderData(request.resource.data);
      
      // Only staff can update orders.
      allow update: if isStaff();
      
      // Only admins can delete orders.
      allow delete: if isAdmin();
      
      // Users can query for their own orders. Staff can query all.
      allow list: if isSignedIn() && 
                    (isStaff() || 
                     (request.query.limit <= 50 && 
                      request.query.where != null && 
                      request.query.where.size() >= 1 && 
                      request.query.where[0].size() >= 3 &&
                      request.query.where[0][0] == 'userId' && 
                      request.query.where[0][2] == request.auth.uid));
    }
  }
}